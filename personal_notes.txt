If I leave off the save flag, yargs will get installed into the node_modules folder, but if we wipe that node_modules folder later and run npm install, yargs won't get reinstalled because it's not listed in the package.json file. This is why we use the save flag.

The filter method is an array method that takes a callback. We'll use an arrow function, and that callback will get called with the argument. In this case, it will be the singular version; if I have an array of notes, it will be called with an individual note:
var duplicateNotes = notes.filter((note) => {

});
This function gets called once for every item in the array, and you have the opportunity to return either true or false. If you return true, it will keep that item in the array, which will eventually get saved into duplicateNotes. If you return false, the new array it generates will not have that item inside duplicateNotes variable. All we want to do is to return true if the titles match, which means that we can return note.title === title, as shown here:

var duplicateNotes = notes.filter((note) => {
  return note.title === title;
});

If the titles are equal, then the preceding return statement will result as true and the item will be kept in the array, which means that there are duplicate notes. If the titles are not equal, which is most likely the case, the statement will result as false, which means that there are no duplicate notes. Now, we can simplify this a little more using arrow functions.

Arrow functions actually allow you to remove the curly braces if you only have one statement.
I'll use the arrow function, as shown here:

var duplicateNotes = notes.filter((note) => note.title === title);

nodemon updates the terminal automatically when it detectes changes

Arrow functions to not bind a this keyword. so if you are using a this inside your function, it is not going to work when you swap it out for an arrow function =>
- this binding; refers to the parent binding, in our case there is no parent function so this would refer to the global this keyword.
- You won't get the arguments keyword


ASYNC STUFF (weather app)
The basic concept of asynchronous program
Call stack and event loop
Callback functions and APIs
HTTPS requests

CALLBACK functions
 In general, a callback function is defined as a function that gets passed as an argument to another function and is executed after some event happens. 

Download extension JSONview for chrome or firefox

Download
https://www.npmjs.com/package/request

HTTP
- When you make a request to a website, the data that comes back is the body of the request.
- Headers are key value pairs: e.g. "date": "Tue, 16 Kan 2018"

PART 2 - ASYNC
- Dark Sky API: Takes location information and turns it into real-world current weather information
- use of yargs: npm i yargs --save
- --save updates the package.json file
- we can get rid of the node modules folder (takes space), then we can regenerate it using npm install

- Encoding URI Component
> encodeURIComponent('1301 lombard street philadelphia');


// console.log(JSON.stringify(body, undefined, 2));
// To print json object in a pretty way
// JSON.stringify(body, filter, spacesPerIndentationk)


PROMISES
- When we make a promise, we're making a promise; we're saying, "Hey, I'll go off and I'll fetch that website data for you.
- Now when you call reject, you're saying, "Hey, we tried to get that thing done man, but we just could not." 
- Now you can only pass one argument to both resolve and reject, which means that if you want to provide multiple pieces of information I recommend that you resolve or reject an object that you can set multiple properties on. In our case though, a simple message, Hey. It worked!, will do the job.
- Now inside a promise, it's important to understand that you can only either resolve or reject a promise once. If you resolve a promise you can't reject it later, and if you resolve it with one value you can't change your mind at a later point in time

- Weather app with PROMISES
- Use of axios library
- Now one reason people love promises over traditional callbacks is that instead of nesting we can simply chain.

EXPRESS library
- The first argument is request (req) stores a ton of information about the request coming in. Things like the headers that were used, any body information, or the method that was made with a request to the path. All of that is stored in request.
- The second argument, respond (res), has a bunch of methods available so we can respond to the HTTP request in whatever way we like. We can customize what data we send back and we could set our HTTP status codes.

HBS module
- http://handlebarsjs.com/
- https://www.npmjs.com/package/hbs

- Now registerHelper takes two arguments:
> The name of the helper as the first argument
> The function to run as the second argument.
- hbs.registerPartials(__dirname + '/views/partials');
> To register partial views like header or footer

-  In order to pass data into one of our helpers, we first have to reference the helper by name, screamIt, then after a space we can specify whatever data we want to pass in as arguments.
- In this section, you'll learn how to use Express middleware. Express middleware is a fantastic tool. It allows you to add on to the existing functionality that Express has.
- app.use is how you register middleware
- app.use is executed in order
- app.get
- app.post
